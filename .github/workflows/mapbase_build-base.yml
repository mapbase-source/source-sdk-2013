name: Mapbase - Build Projects

on:
  workflow_call:
    inputs:
      configuration:
        description: 'Which configuration to build with'
        default: 'Release'
        required: true
        type: string
      branch:
        description: 'Which Source 2013 engine branch to compile for'
        default: 'sp'
        required: true
        type: string
      project-group:
        description: 'Which group of projects to compile'
        required: true
        type: string
      solution-name:
        description: 'The name of the solution/makefile'
        required: true
        type: string

jobs:
  build_windows:
    name: Build Windows (VS2022)
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.1

    - name: Enable VS2022
      working-directory: '${{inputs.branch}}/src/vpc_scripts'
      shell: bash
      run: sed -i 's/^\($Conditional[ 	]\+VS2022[ 	]\+\).*/\1"1"/' newer_vs_toolsets.vpc

    - name: Create project files
      working-directory: '${{inputs.branch}}/src'
      shell: cmd
      # https://github.com/ValveSoftware/source-sdk-2013/issues/72
      run: |
        reg add "HKLM\SOFTWARE\WOW6432Node\Microsoft\VisualStudio\10.0\Projects\{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}" /v DefaultProjectExtension /t REG_SZ /d vcproj /f
        create${{inputs.project-group}}projects.bat

      # --------------------------------------------------------------------

      # "I'm invoking msbuild for each project individually, which looks a bit odd considering there is a solution file which should be able to invoke the builds in their proper order automatically, but passing the solution to msbuild doesn't seem to work."
      # https://github.com/mapbase-source/source-sdk-2013/pull/162

    - name: Build mathlib
      #if: steps.filter.outputs.game == 'true'
      working-directory: '${{inputs.branch}}/src'
      shell: cmd
      run: |
        msbuild -m -p:Configuration=${{inputs.configuration}} mathlib\mathlib.vcxproj

    - name: Build Base Libraries
      if: inputs.project-group == 'all' || inputs.project-group == 'game' || inputs.project-group == 'maptools'
      working-directory: '${{inputs.branch}}/src'
      shell: cmd
      run: |
        msbuild -m -p:Configuration=${{inputs.configuration}} raytrace\raytrace.vcxproj
        msbuild -m -p:Configuration=${{inputs.configuration}} tier1\tier1.vcxproj
        msbuild -m -p:Configuration=${{inputs.configuration}} vgui2\vgui_controls\vgui_controls.vcxproj
        msbuild -m -p:Configuration=${{inputs.configuration}} vscript\vscript.vcxproj

    - name: Build Map Tools
      if: inputs.project-group == 'all' || inputs.project-group == 'maptools'
      working-directory: '${{inputs.branch}}/src'
      shell: cmd
      run: |
        msbuild -m -p:Configuration=${{inputs.configuration}} utils\vbsp\vbsp.vcxproj
        msbuild -m -p:Configuration=${{inputs.configuration}} utils\vvis\vvis.vcxproj
        msbuild -m -p:Configuration=${{inputs.configuration}} utils\vvis_launcher\vvis_launcher.vcxproj
        msbuild -m -p:Configuration=${{inputs.configuration}} utils\vrad\vrad.vcxproj
        msbuild -m -p:Configuration=${{inputs.configuration}} utils\vrad_launcher\vrad_launcher.vcxproj

    - name: Build Shaders
      if: inputs.project-group == 'all' || inputs.project-group == 'shaders'
      working-directory: '${{inputs.branch}}/src'
      shell: cmd
      run: |
        msbuild -m -p:Configuration=${{inputs.configuration}} materialsystem\stdshaders\game_shader_dx9_episodic.vcxproj
        msbuild -m -p:Configuration=${{inputs.configuration}} materialsystem\stdshaders\game_shader_dx9_hl2.vcxproj

    - name: Build Game
      if: inputs.project-group == 'all' || inputs.project-group == 'game'
      working-directory: '${{inputs.branch}}/src'
      shell: cmd
      run: |
        msbuild -m -p:Configuration=${{inputs.configuration}} responserules\runtime\responserules.vcxproj
        msbuild -m -p:Configuration=${{inputs.configuration}} game\client\client_episodic.vcxproj
        msbuild -m -p:Configuration=${{inputs.configuration}} game\client\client_hl2.vcxproj
        msbuild -m -p:Configuration=${{inputs.configuration}} game\server\server_episodic.vcxproj
        msbuild -m -p:Configuration=${{inputs.configuration}} game\server\server_hl2.vcxproj

      # --------------------------------------------------------------------

    - name: Publish Windows game DLLs (HL2 Episodic)
      if: inputs.project-group == 'all' || inputs.project-group == 'game'
      uses: actions/upload-artifact@v2
      with:
        name: Game DLLs
        path: |
          ${{inputs.branch}}/game/mod_episodic/bin/client.dll
          ${{inputs.branch}}/game/mod_episodic/bin/server.dll
        if-no-files-found: error

    - name: Publish Windows shader DLL (HL2 Episodic)
      if: inputs.project-group == 'shaders'
      uses: actions/upload-artifact@v2
      with:
        name: Shader DLL
        path: |
          ${{inputs.branch}}/game/mod_episodic/bin/game_shader_dx9.dll
        if-no-files-found: error

    - name: Publish Windows map tools
      if: inputs.project-group == 'maptools'
      uses: actions/upload-artifact@v2
      with:
        name: Map Tools (Windows)
        path: |
          ${{inputs.branch}}/game/bin/vbsp.exe
          ${{inputs.branch}}/game/bin/vvis.exe
          ${{inputs.branch}}/game/bin/vvis_dll.dll
          ${{inputs.branch}}/game/bin/vrad.exe
          ${{inputs.branch}}/game/bin/vrad_dll.dll
        if-no-files-found: error

    - name: Publish Windows map tools
      if: inputs.project-group == 'maptools'
      uses: actions/upload-artifact@v2
      with:
        name: Map Tools (Windows)
        path: |
          ${{inputs.branch}}/game/bin/vbsp.exe
          ${{inputs.branch}}/game/bin/vvis.exe
          ${{inputs.branch}}/game/bin/vvis_dll.dll
          ${{inputs.branch}}/game/bin/vrad.exe
          ${{inputs.branch}}/game/bin/vrad_dll.dll
        if-no-files-found: error

    - name: Publish everything (Windows)
      if: inputs.project-group == 'all'
      uses: actions/upload-artifact@v2
      with:
        name: Everything (Windows)
        path: |
          ${{inputs.branch}}/game/bin
          ${{inputs.branch}}/game/mod_episodic/bin
          ${{inputs.branch}}/game/mod_hl2/bin
        if-no-files-found: error

  build_ubuntu:
    name: Build Ubuntu (GCC/G++ 9)
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install GCC/G++ multilib
      run: sudo apt-get install gcc-multilib g++-multilib

    - name: Create game projects
      working-directory: '${{inputs.branch}}/src'
      run: ./create${{inputs.project-group}}projects

      # --------------------------------------------------------------------

    - name: Build
      working-directory: '${{inputs.branch}}/src'
      run: make -f ${{inputs.solution-name}}.mak

      # --------------------------------------------------------------------

    - name: Publish Linux game SOs (HL2 Episodic)
      if: inputs.project-group == 'game'
      uses: actions/upload-artifact@v2
      with:
        name: Game SOs
        path: |
          ${{inputs.branch}}/game/mod_episodic/bin/client.so
          ${{inputs.branch}}/game/mod_episodic/bin/server.so
        if-no-files-found: error

    - name: Publish Linux shader SO (HL2 Episodic)
      if: inputs.project-group == 'shaders'
      uses: actions/upload-artifact@v2
      with:
        name: Game SOs
        path: |
          ${{inputs.branch}}/game/mod_episodic/bin/game_shader_dx9.so
        if-no-files-found: error

    - name: Publish everything (Linux)
      if: inputs.project-group == 'all'
      uses: actions/upload-artifact@v2
      with:
        name: Everything (Linux)
        path: |
          ${{inputs.branch}}/game/bin
          ${{inputs.branch}}/game/mod_episodic/bin
          ${{inputs.branch}}/game/mod_hl2/bin
        if-no-files-found: error
